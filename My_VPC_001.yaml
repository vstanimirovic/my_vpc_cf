AWSTemplateFormatVersion: 2010-09-09

# This CloudFormation template deploys a VPC.  
# When protected subnets are created, NATing is provided by NAT Gateway.
# The VPC and subnets are exported for use by other stacks.

# ====================================================================================================================================================================================
Metadata: 
  # Control the UI display when running this template from the AWS Management Console:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Network Configuration"
        Parameters:
          - ClientName
          - NumberOfAZs
          - ProtectedSubnets
          - PrivateSubnets
          - NATType
    ParameterLabels:
        ClientName:
            default: "Client's Name"
        NumberOfAZs:
            default: "Number of AZs"
        ProtectedSubnets:
            default: "Protected Subnets"
        PrivateSubnets:
            default: "Private Subnets"
        NATType:
            default: "NAT Type"
# ====================================================================================================================================================================================
Parameters:
  ClientName:
    Type: String
    Description: Add client's name

  ProtectedSubnets:
    Type: String
    AllowedValues: 
    - True
    - False
    Default: False
    Description: Do you want to add protected subnets?
  
  PrivateSubnets:
    Type: String
    AllowedValues: 
    - True
    - False
    Default: False
    Description: Do you want to add private subnets?

  NumberOfAZs:
    Type: Number
    AllowedValues: 
    - 1
    - 2
    - 3
    Default: 2
    Description:  How many Availability Zones do you wish to utilize?

  NATType:
    Type: String
    AllowedValues:
    - "NAT Gateway"
    Default:  "NAT Gateway"
    Description:  This setting will be IGNORED if you do not build protected subnets.
# ====================================================================================================================================================================================
Conditions:
  BuildPublicB:         !Not [ !Equals [ !Ref NumberOfAZs, 1 ]]  
  BuildPublicC:         !Equals [ !Ref NumberOfAZs, 3 ]
  # ============================================================  
  BuildProtectedSubnets:  !Equals [ !Ref ProtectedSubnets, True ] 
  BuildProtectedA:        !Equals [ !Ref ProtectedSubnets, True ]       # Can't determine how to build a condition from a separate single condition
  BuildProtectedB:        !And [ Condition: BuildProtectedSubnets, Condition: BuildPublicB ]
  BuildProtectedC:        !And [ Condition: BuildProtectedSubnets, Condition: BuildPublicC ]
  # ============================================================
  BuildPrivateSubnets:  !Equals [ !Ref PrivateSubnets, True ] 
  BuildPrivateA:        !Equals [ !Ref PrivateSubnets, True ]       # Can't determine how to build a condition from a separate single condition
  BuildPrivateB:        !And [ Condition: BuildPrivateSubnets, Condition: BuildPublicB ]
  BuildPrivateC:        !And [ Condition: BuildPrivateSubnets, Condition: BuildPublicC ]
  # ============================================================
  BuildNATGateway:      !And [ Condition: BuildProtectedSubnets, !Equals [ !Ref NATType, "NAT Gateway" ] ]
  # ============================================================
# ====================================================================================================================================================================================
Resources:

  # First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-VPC
        
  # VPC will need internet access:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Now some subnets, 2 public, protected and 2 private:
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.0.0/19
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.32.0/19
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.64.0/19
      AvailabilityZone: !Select [ 2, !GetAZs ]    # Get the third AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-C
  # spare range: 10.10.96.0/19

  # ============================================================
  ProtectedSubnetA:
    Type: AWS::EC2::Subnet
    Condition: BuildProtectedA
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.128.0/20
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Protected-A
  ProtectedSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildProtectedB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.144.0/20
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Protected-B
  ProtectedSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildProtectedC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.160.0/20
      AvailabilityZone: !Select [ 2, !GetAZs ]    # Get the third AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Protected-C
  # spare range: 10.10.176.0/20

  # ============================================================
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateA
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.192.0/20
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.208.0/20
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.224.0/20
      AvailabilityZone: !Select [ 2, !GetAZs ]    # Get the third AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-C
  # spare range: 10.10.240.0/20

  # ============================================================

  # Some route tables for our subnets:        
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public RTB
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # ============================================================

  # Here is a Protected route table:
  ProtectedRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildProtectedSubnets
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Protected RTB
  ProtectedRoute1:            # Protected route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Condition: BuildProtectedSubnets
    Properties:
      RouteTableId: !Ref ProtectedRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Otherwise if we are using a NAT Gateway, route traffic through the NAT Gateway:
      NatGatewayId: !If [ BuildNATGateway, !Ref NATGateway, !Ref "AWS::NoValue" ]
  # ============================================================
  
  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private RTB
  # ============================================================


  # Attach the public subnets to public route tables, 
  # and attach the protected subnets to protected route tables,
  # and attach the private subnets to private route tables:    
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicB
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicC
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
  # ============================================================
  ProtectedSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildProtectedA
    Properties:
      SubnetId: !Ref ProtectedSubnetA
      RouteTableId: !Ref ProtectedRouteTable
  ProtectedSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildProtectedB
    Properties:
      SubnetId: !Ref ProtectedSubnetB
      RouteTableId: !Ref ProtectedRouteTable
  ProtectedSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildProtectedC
    Properties:
      SubnetId: !Ref ProtectedSubnetC
      RouteTableId: !Ref ProtectedRouteTable
  # ============================================================    
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateA
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateB
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateC
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable

  # A NAT Gateway will be built and used if the user selected Protected subnets and a Gateway instead of an EC2 instance.  
  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: BuildNATGateway
    Properties: 
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
      - Key: Name
        Value: !Sub ${AWS::StackName}-NATGW
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Condition: BuildNATGateway
    Properties:
      Domain: VPC
# ====================================================================================================================================================================================
Outputs:
  VPC:
    Description: VPC of the base network
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC

  # ============================================================  
  PublicSubnetA:
    Description: First Public Subnet
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetA
  
  PublicSubnetB:
    Description: Second Public Subnet
    Condition: BuildPublicB
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetB
  
  PublicSubnetC:
    Description: Third Public Subnet
    Condition: BuildPublicC
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetC
  # ============================================================
  ProtectedSubnetA:
    Condition: BuildProtectedSubnets
    Description: First Protected Subnet
    Value: !Ref ProtectedSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-ProtectedSubnetA
  
  ProtectedSubnetB:
    Condition: BuildProtectedB
    Description: Second Protected Subnet
    Value: !Ref ProtectedSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-ProtectedSubnetB
  
  ProtectedSubnetC:
    Condition: BuildProtectedC
    Description: Third Protected Subnet
    Value: !Ref ProtectedSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-ProtectedSubnetC
  # ============================================================
  PrivateSubnetA:
    Condition: BuildPrivateSubnets
    Description: First Private Subnet
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetA
  
  PrivateSubnetB:
    Condition: BuildPrivateB
    Description: Second Private Subnet
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetB
  
  PrivateSubnetC:
    Condition: BuildPrivateC
    Description: Third Private Subnet
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetC
# ====================================================================================================================================================================================
